{"version":3,"sources":["assets/spinner.gif","serviceWorker.js","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","utils/reducers.js","utils/store.js","pages/Success.js","pages/OrderHistory.js","App.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","useSelector","dispatch","useDispatch","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","initialState","reducer","action","newState","createStore","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b92e79be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      \n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { pluralize, idbPromise } from \"../../utils/helpers\";\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n  //======add redux======\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  //=====add redux======\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n//redux\nexport const ADD_PRODUCT = 'ADD_PRODUCT';\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT';\n\nexport const addProduct = (product) => ({\n    type: ADD_PRODUCT,\n    payload: product\n});\n\nexport const removeProduct = (productId) => ({\n    type: REMOVE_PRODUCT,\n    payload: productId \n});\n\nexport const updateProducts = (products) => ({\n    type: UPDATE_PRODUCTS,\n    payload: products\n})","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { idbPromise } from '../../utils/helpers';\nimport ProductItem from '../ProductItem';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  //========add redux=======\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  //=====add redux======\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    //if there's data to be stored\n    if (data) {\n      //let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      //but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      //add else if to check if 'loading is undefined in useQuery() Hook\n    } else if (!loading) {\n      //we're offline, get all of the data from the products store\n      idbPromise('products', 'get').then((products) => {\n        //use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\n\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from '../../utils/helpers';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nfunction CategoryMenu() {\n    //========add redux=======\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  //=====add redux======\n\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n    //const [, dispatch] = useStoreContext();\n        //=======add redux========\n    //const [state, dispatch] = useStoreContext();\n    const dispatch = useDispatch();\n    //const state = useSelector((state) => state);\n    //=======add redux========\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n\n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={`/images/${item.image}`}\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n    //=======add redux========\n    //const [state, dispatch] = useStoreContext();\n    const dispatch = useDispatch();\n    const state = useSelector((state) => state);\n    //=======add redux========\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        }\n\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach((item) => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds },\n        });\n    }\n\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span role=\"img\" aria-label=\"trash\">\n                    🛒\n                </span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>\n                [close]\n            </div>\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                    {state.cart.map((item) => (\n                        <CartItem key={item._id} item={item} />\n                    ))}\n\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${calculateTotal()}</strong>\n\n                        {Auth.loggedIn() ? (\n                            <button onClick={submitCheckout}>Checkout</button>\n                        ) : (\n                            <span>(log in to check out)</span>\n                        )}\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n//import { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\n\nfunction Detail() {\n  //======redux======\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  //const [state, dispatch] = useStoreContext();\n  //=======redux======\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import {\n  //==========add for redux=======\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n  //==========add for redux=======\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    //=====add redux====\n    // case ADD_PRODUCT:\n    //   return {\n    //     ...state,\n    //     products: [...state.products, action.payload],\n    //   };\n\n    // case REMOVE_PRODUCT:\n    //   return {\n    //     ...state,\n    //     product: state.products.filter((product) => product.id !== action.payload)\n    //   };\n    //=====add redux======\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n          }\n          return product\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducers';\nconst store = createStore(reducer);\n\nexport default store;","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map((item) => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n\n            setTimeout(() => {\n                window.location.assign('/');\n            }, 3000);\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>Thank you for your purchase!</h2>\n                <h2>You will now be redirected to the home page</h2>\n            </Jumbotron>\n        </div>\n    );\n}\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { Provider } from 'react-redux';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport store from './utils/store';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}